(ns my-project-euler-lab.core-pb-2
  (:use [clojure.test               :only [run-tests]])
  (:use [midje.sweet])
  (:use [clojure.contrib.repl-utils :only [show]])
  (:use [clojure.pprint             :only [pprint]])
  (:use [clojure.walk               :only [macroexpand-all]]))

                                        ; Problem 2

;; Each new term in the Fibonacci sequence is generated by adding the
;; previous two terms. By starting with 1 and 2, the first 10 terms will be:
;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do
;; not exceed four million, find the sum of the even-valued
;; terms.

(defn fibonacci-seq "Lazy-seq fibonacci"
  []
  ((fn fib-seq [a b]
     (lazy-seq (cons a (fib-seq b (+ a b))))) 1 2))

(fact
  (take 1 (fibonacci-seq)) => [1]
  (take 2 (fibonacci-seq)) => [1 2]
  (take 3 (fibonacci-seq)) => [1 2 3]
  (take 4 (fibonacci-seq)) => [1 2 3 5]
  (take 11 (fibonacci-seq)) => [1 2 3 5 8 13 21 34 55 89 144])

;; compute the sum of even number in the fibonacci suite up to 4000000

;.;. Good code is its own best documentation. -- Steve McConnell
(fact
  (reduce + (filter #(zero? (rem % 2)) (take 33 (fibonacci-seq)))) => 4613732)

(println "--------- END OF PB 2 ----------" (java.util.Date.))